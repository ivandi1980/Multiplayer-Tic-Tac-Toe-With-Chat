{"ast":null,"code":"var _jsxFileName = \"/Users/pedrohenriquemachado/Documents/Projects/multi-tic-tac-toe/client/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Square from \"./Square\";\nimport { Patterns } from \"../Patterns\";\nimport { useChatContext } from \"stream-chat-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    channel\n  } = _ref;\n  const {\n    client\n  } = useChatContext();\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [player, setPlayer] = useState(\"X\");\n  const [turn, setTurn] = useState(\"X\");\n  useEffect(() => {\n    checkWin();\n    checkIfTie();\n  }, [board]);\n  useEffect(() => {\n    if (result.state != \"none\") {\n      alert(`Game Finished! Winning Player: ${result.winner}`); //   restartGame();\n    }\n  }, [result]);\n\n  const chooseSquare = async square => {\n    if (turn === player && board[square] === \"\") {\n      setTurn(player === \"X\" ? \"O\" : \"X\");\n      await channel.sendEvent({\n        type: \"game-move\",\n        data: {\n          square,\n          player: player\n        }\n      });\n      setBoard(board.map((val, idx) => {\n        if (idx == square && val == \"\") {\n          return player;\n        }\n\n        return val;\n      }));\n    }\n  };\n\n  const checkWin = () => {\n    Patterns.forEach(currPattern => {\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach(idx => {\n        if (board[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n\n      if (foundWinningPattern) {\n        setResult({\n          winner: board[currPattern[0]],\n          state: \"Won\"\n        });\n      }\n    });\n  };\n\n  const checkIfTie = () => {\n    let filled = true;\n    board.forEach(square => {\n      if (square == \"\") {\n        filled = false;\n      }\n    });\n\n    if (filled) {\n      setResult({\n        winner: \"No One\",\n        state: \"Tie\"\n      });\n    }\n  };\n\n  channel.on(event => {\n    if (event.type === \"game-move\" && event.user.id !== client.userID) {\n      const play = event.data.player === \"X\" ? \"O\" : \"X\";\n      setPlayer(play);\n      setTurn(play);\n      setBoard(board.map((val, idx) => {\n        if (idx == event.data.square && val == \"\") {\n          return event.data.player;\n        }\n\n        return val;\n      }));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        val: board[0],\n        chooseSquare: () => {\n          chooseSquare(0);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[1],\n        chooseSquare: () => {\n          chooseSquare(1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[2],\n        chooseSquare: () => {\n          chooseSquare(2);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        val: board[3],\n        chooseSquare: () => {\n          chooseSquare(3);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[4],\n        chooseSquare: () => {\n          chooseSquare(4);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[5],\n        chooseSquare: () => {\n          chooseSquare(5);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        val: board[6],\n        chooseSquare: () => {\n          chooseSquare(6);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[7],\n        chooseSquare: () => {\n          chooseSquare(7);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        val: board[8],\n        chooseSquare: () => {\n          chooseSquare(8);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"3jI5JA129SRR4nhIe0a2NkKuORo=\", false, function () {\n  return [useChatContext];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/pedrohenriquemachado/Documents/Projects/multi-tic-tac-toe/client/src/components/Board.js"],"names":["React","useState","useEffect","Square","Patterns","useChatContext","Board","channel","client","board","setBoard","player","setPlayer","turn","setTurn","checkWin","checkIfTie","result","state","alert","winner","chooseSquare","square","sendEvent","type","data","map","val","idx","forEach","currPattern","firstPlayer","foundWinningPattern","setResult","filled","on","event","user","id","userID","play"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Square from \"./Square\";\nimport { Patterns } from \"../Patterns\";\nimport { useChatContext } from \"stream-chat-react\";\n\nfunction Board({ channel }) {\n  const { client } = useChatContext();\n\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [player, setPlayer] = useState(\"X\");\n  const [turn, setTurn] = useState(\"X\");\n\n  useEffect(() => {\n    checkWin();\n    checkIfTie();\n  }, [board]);\n\n  useEffect(() => {\n    if (result.state != \"none\") {\n      alert(`Game Finished! Winning Player: ${result.winner}`);\n      //   restartGame();\n    }\n  }, [result]);\n\n  const chooseSquare = async (square) => {\n    if (turn === player && board[square] === \"\") {\n      setTurn(player === \"X\" ? \"O\" : \"X\");\n      await channel.sendEvent({\n        type: \"game-move\",\n        data: { square, player: player },\n      });\n      setBoard(\n        board.map((val, idx) => {\n          if (idx == square && val == \"\") {\n            return player;\n          }\n          return val;\n        })\n      );\n    }\n  };\n\n  const checkWin = () => {\n    Patterns.forEach((currPattern) => {\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach((idx) => {\n        if (board[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n\n      if (foundWinningPattern) {\n        setResult({ winner: board[currPattern[0]], state: \"Won\" });\n      }\n    });\n  };\n\n  const checkIfTie = () => {\n    let filled = true;\n    board.forEach((square) => {\n      if (square == \"\") {\n        filled = false;\n      }\n    });\n\n    if (filled) {\n      setResult({ winner: \"No One\", state: \"Tie\" });\n    }\n  };\n\n  channel.on((event) => {\n    if (event.type === \"game-move\" && event.user.id !== client.userID) {\n      const play = event.data.player === \"X\" ? \"O\" : \"X\";\n      setPlayer(play);\n      setTurn(play);\n      setBoard(\n        board.map((val, idx) => {\n          if (idx == event.data.square && val == \"\") {\n            return event.data.player;\n          }\n          return val;\n        })\n      );\n    }\n  });\n\n  return (\n    <div className=\"board\">\n      <div className=\"row\">\n        <Square\n          val={board[0]}\n          chooseSquare={() => {\n            chooseSquare(0);\n          }}\n        />\n        <Square\n          val={board[1]}\n          chooseSquare={() => {\n            chooseSquare(1);\n          }}\n        />\n        <Square\n          val={board[2]}\n          chooseSquare={() => {\n            chooseSquare(2);\n          }}\n        />\n      </div>\n      <div className=\"row\">\n        <Square\n          val={board[3]}\n          chooseSquare={() => {\n            chooseSquare(3);\n          }}\n        />\n        <Square\n          val={board[4]}\n          chooseSquare={() => {\n            chooseSquare(4);\n          }}\n        />\n        <Square\n          val={board[5]}\n          chooseSquare={() => {\n            chooseSquare(5);\n          }}\n        />\n      </div>\n      <div className=\"row\">\n        <Square\n          val={board[6]}\n          chooseSquare={() => {\n            chooseSquare(6);\n          }}\n        />\n        <Square\n          val={board[7]}\n          chooseSquare={() => {\n            chooseSquare(7);\n          }}\n        />\n        <Square\n          val={board[8]}\n          chooseSquare={() => {\n            chooseSquare(8);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}