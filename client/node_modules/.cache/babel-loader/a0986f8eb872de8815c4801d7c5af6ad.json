{"ast":null,"code":"var _jsxFileName = \"/Users/pedrohenriquemachado/Documents/Projects/multi-tic-tac-toe/client/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./Board\";\nimport Cookies from \"universal-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Game(_ref) {\n  _s();\n\n  let {\n    client,\n    removeAllCookies\n  } = _ref;\n  const [startGame, setStartGame] = useState(false);\n  const [user2, setUser2] = useState(false);\n  const [channelName, setChannelName] = useState(\"\");\n  const cookies = new Cookies();\n  const [channel, setChannel] = useState(client.channel(\"messaging\", cookies.get(\"channelName\")));\n\n  const deleteChannel = async () => {\n    const destroy = await channel.delete();\n  };\n\n  const createChannel = async () => {\n    try {\n      const response = await client.queryUsers({\n        name: {\n          $eq: user2\n        }\n      });\n\n      if (response.users.length === 0) {\n        alert(\"User not found\");\n        return;\n      }\n\n      const newChannel = await client.channel(\"messaging\", {\n        members: [cookies.get(\"userId\"), response.users[0].id]\n      });\n      cookies.set(\"channelName\", channelName);\n      await newChannel.create();\n      await newChannel.watch();\n      setChannel(newChannel);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleStartGame = async () => {\n    if (channel) {\n      await channel.sendEvent({\n        type: \"start-game\",\n        text: \"Bruhhhhhhh\"\n      });\n    } // setStartGame(true);\n\n  };\n\n  const joinGame = async () => {\n    const filter = {\n      type: \"messaging\",\n      members: {\n        $in: [user2]\n      }\n    };\n    const sort = [{\n      last_message_at: -1\n    }];\n    const channels = await client.queryChannels(filter, sort);\n    console.log(channels); // await channel.watch();\n  }; // if (channel) {\n\n\n  channel.on(event => {\n    console.log(\"event\", event);\n    console.log(\"channel.state\", channel.state);\n  });\n  console.log(channel); // useEffect(() => {\n  //   const initializeChannel = async () => {\n  //     // if (channel) {\n  //     const channel = client.channel(\"messaging\", channelName);\n  //     await channel.watch();\n  //   };\n  //   initializeChannel();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: startGame ? /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \" Create A Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Username of your rival...\",\n          onChange: event => {\n            setUser2(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Choose a name for your game...\",\n          onChange: event => {\n            setChannelName(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createChannel,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \" Join A Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter game name...\",\n          onChange: event => {\n            setChannelName(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: joinGame,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteChannel,\n        children: \"Delete Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          client.disconnectUser();\n          removeAllCookies();\n        },\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"zrDoCUgesRUAwTcWm33vR5Cmz9k=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/pedrohenriquemachado/Documents/Projects/multi-tic-tac-toe/client/src/components/Game.js"],"names":["React","useEffect","useState","Board","Cookies","Game","client","removeAllCookies","startGame","setStartGame","user2","setUser2","channelName","setChannelName","cookies","channel","setChannel","get","deleteChannel","destroy","delete","createChannel","response","queryUsers","name","$eq","users","length","alert","newChannel","members","id","set","create","watch","error","console","log","handleStartGame","sendEvent","type","text","joinGame","filter","$in","sort","last_message_at","channels","queryChannels","on","event","state","target","value","disconnectUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Board from \"./Board\";\nimport Cookies from \"universal-cookie\";\n\nfunction Game({ client, removeAllCookies }) {\n  const [startGame, setStartGame] = useState(false);\n  const [user2, setUser2] = useState(false);\n  const [channelName, setChannelName] = useState(\"\");\n  const cookies = new Cookies();\n\n  const [channel, setChannel] = useState(\n    client.channel(\"messaging\", cookies.get(\"channelName\"))\n  );\n\n  const deleteChannel = async () => {\n    const destroy = await channel.delete();\n  };\n  const createChannel = async () => {\n    try {\n      const response = await client.queryUsers({\n        name: { $eq: user2 },\n      });\n\n      if (response.users.length === 0) {\n        alert(\"User not found\");\n        return;\n      }\n\n      const newChannel = await client.channel(\"messaging\", {\n        members: [cookies.get(\"userId\"), response.users[0].id],\n      });\n      cookies.set(\"channelName\", channelName);\n      await newChannel.create();\n      await newChannel.watch();\n\n      setChannel(newChannel);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleStartGame = async () => {\n    if (channel) {\n      await channel.sendEvent({\n        type: \"start-game\",\n        text: \"Bruhhhhhhh\",\n      });\n    }\n    // setStartGame(true);\n  };\n\n  const joinGame = async () => {\n    const filter = { type: \"messaging\", members: { $in: [user2] } };\n    const sort = [{ last_message_at: -1 }];\n\n    const channels = await client.queryChannels(filter, sort);\n    console.log(channels);\n\n    // await channel.watch();\n  };\n\n  // if (channel) {\n\n  channel.on((event) => {\n    console.log(\"event\", event);\n    console.log(\"channel.state\", channel.state);\n  });\n\n  console.log(channel);\n  // useEffect(() => {\n  //   const initializeChannel = async () => {\n  //     // if (channel) {\n  //     const channel = client.channel(\"messaging\", channelName);\n  //     await channel.watch();\n  //   };\n  //   initializeChannel();\n  // }, []);\n  return (\n    <div>\n      {startGame ? (\n        <Board />\n      ) : (\n        <>\n          <div>\n            <h4> Create A Game</h4>\n            <input\n              placeholder=\"Username of your rival...\"\n              onChange={(event) => {\n                setUser2(event.target.value);\n              }}\n            />\n            <input\n              placeholder=\"Choose a name for your game...\"\n              onChange={(event) => {\n                setChannelName(event.target.value);\n              }}\n            />\n            <button onClick={createChannel}>Start Game</button>\n          </div>\n          <div>\n            <h4> Join A Game</h4>\n            <input\n              placeholder=\"Enter game name...\"\n              onChange={(event) => {\n                setChannelName(event.target.value);\n              }}\n            />\n            <button onClick={joinGame}>Join Game</button>\n            <button onClick={handleStartGame}>Start Game</button>\n          </div>\n          <button onClick={deleteChannel}>Delete Channel</button>\n          <button\n            onClick={() => {\n              client.disconnectUser();\n              removeAllCookies();\n            }}\n          >\n            Log Out\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}